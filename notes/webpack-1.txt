## WEBPACK
- is a static module bundler for modern Javascript
- version 4.0 webpack does not require a configuration file

################### ENTRY ###################
- indicates which module webpack should use to begin building out its internal dependency graph.
- by default the value is './scr/index.js'

SAMPLE:
module.exports = {
  entry: './path/to/my/entry/file.js',
}

################### OUTPUT ###################
- property tells webpack where to emit the bundles it creates and how to name these files.
- by default the value is './dist/main.js'

SAMPLE:
const path = require('path');

module.exports = {
  entry: './path/to/my/entry/file.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'my-first-webpack.bundle.js',
  },
};

################### LOADERS ###################
- out of the box, webpack only understands JavaScript and JSON files.
- loaders allow webpack to process other types of files and convert them into valid modules 
that can be consumed by your application and added to the dependency graph.
COMMON LOADER PROPERTIES
* test - identifies which file or files should be transformed
* use - indicated which loader should be used to do the transforming

SAMPLE:
const path = require('path');
module.exports = {
  output: {
    filename: 'my-first-webpack.bundle.js',
  },
  module: {
    rules: [{ test: /\.txt$/, use: 'raw-loader' }],
  },
};

################### PLUGINS ###################
- while loaders are used to transform certain types of modules, plugins can be leveraged to 
perform a wider range of tasks like bundle optimization, asset management and injection of 
environment variables.
- in order to use a plugin, you need to require() it and add it to the plugins array

SAMPLE:
const HtmlWebpackPlugin = require('html-webpack-plugin'); //installed via npm
const webpack = require('webpack'); //to access built-in plugins
module.exports = {
  module: {
    rules: [{ test: /\.txt$/, use: 'raw-loader' }],
  },
  plugins: [new HtmlWebpackPlugin({ template: './src/index.html' })],
};